{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/aurelien/repo/next-ts-template/components/logo.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport styles from '../styles/Home.module.css';\n\nconst renderLogo = props => {\n  const size = useWindowSize();\n\n  if (size.width < 1280) {\n    console.log(\"HERE\");\n  }\n\n  if (props.visible === false) {\n    return;\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.containerBufferLogo,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"logo.png\",\n        alt: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 12\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 10\n    }, this);\n  }\n};\n\nexport default renderLogo; // Hook\n\nfunction useWindowSize() {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const {\n    0: windowSize,\n    1: setWindowSize\n  } = useState({\n    width: undefined,\n    height: undefined\n  });\n  useEffect(() => {\n    // only execute all the code below in client side\n    if (false) {\n      // Handler to call on window resize\n      function handleResize() {\n        // Set window width/height to state\n        setWindowSize({\n          width: window.innerWidth,\n          height: window.innerHeight\n        });\n      } // Add event listener\n\n\n      window.addEventListener(\"resize\", handleResize); // Call handler right away so state gets updated with initial window size\n\n      handleResize(); // Remove event listener on cleanup\n\n      return () => window.removeEventListener(\"resize\", handleResize);\n    }\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n}","map":{"version":3,"sources":["/home/aurelien/repo/next-ts-template/components/logo.tsx"],"names":["React","useState","useEffect","styles","renderLogo","props","size","useWindowSize","width","console","log","visible","containerBufferLogo","windowSize","setWindowSize","undefined","height","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener"],"mappings":";;AAAA,OAAOA,KAAP,IAA2BC,QAA3B,EAAqCC,SAArC,QAAsD,OAAtD;AACA,OAAOC,MAAP,MAAmB,2BAAnB;;AAMA,MAAMC,UAAU,GAAIC,KAAD,IAAmB;AAClC,QAAMC,IAAI,GAAGC,aAAa,EAA1B;;AACA,MAAID,IAAI,CAACE,KAAL,GAAa,IAAjB,EAAuB;AACtBC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA;;AACD,MAAIL,KAAK,CAACM,OAAN,KAAkB,KAAtB,EAA6B;AAC5B;AACA,GAFD,MAEO;AACT,wBACO;AAAK,MAAA,SAAS,EAAER,MAAM,CAACS,mBAAvB;AAAA,6BACE;AAAK,QAAA,GAAG,EAAE,UAAV;AAAsB,QAAA,GAAG,EAAE;AAA3B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADP;AAKG;AACJ,CAdD;;AAeA,eAAeR,UAAf,C,CAGA;;AACA,SAASG,aAAT,GAAyB;AACxB;AACA;AACA,QAAM;AAAA,OAACM,UAAD;AAAA,OAAaC;AAAb,MAA8Bb,QAAQ,CAAC;AAC5CO,IAAAA,KAAK,EAAEO,SADqC;AAE5CC,IAAAA,MAAM,EAAED;AAFoC,GAAD,CAA5C;AAIAb,EAAAA,SAAS,CAAC,MAAM;AACf;AACA,eAAmC;AAClC;AACA,eAASe,YAAT,GAAwB;AACvB;AACAH,QAAAA,aAAa,CAAC;AACbN,UAAAA,KAAK,EAAEU,MAAM,CAACC,UADD;AAEbH,UAAAA,MAAM,EAAEE,MAAM,CAACE;AAFF,SAAD,CAAb;AAIA,OARiC,CASlC;;;AACAF,MAAAA,MAAM,CAACG,gBAAP,CAAwB,QAAxB,EAAkCJ,YAAlC,EAVkC,CAWlC;;AACAA,MAAAA,YAAY,GAZsB,CAalC;;AACA,aAAO,MAAMC,MAAM,CAACI,mBAAP,CAA2B,QAA3B,EAAqCL,YAArC,CAAb;AACA;AACD,GAlBQ,EAkBN,EAlBM,CAAT,CAPwB,CAyBhB;;AACR,SAAOJ,UAAP;AACA","sourcesContent":["import React, { Component, useState, useEffect } from 'react'\nimport styles from '../styles/Home.module.css'\n\ninterface IProps {\n    visible: Boolean;\n}\n\nconst renderLogo = (props: IProps) => {\n    const size = useWindowSize();\n    if (size.width < 1280) {\n    \tconsole.log(\"HERE\")\n    }\n    if (props.visible === false) {\n    \treturn;\n    } else {\n\t\treturn (\n\t        <div className={styles.containerBufferLogo}>\n\t          <img src={\"logo.png\"} alt={\"logo\"}/>\n\t        </div>\n\t\t);\n    }\n}\nexport default renderLogo;\n\n\n// Hook\nfunction useWindowSize() {\n\t// Initialize state with undefined width/height so server and client renders match\n\t// Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n\tconst [windowSize, setWindowSize] = useState({\n\t\twidth: undefined,\n\t\theight: undefined,\n\t});\n\tuseEffect(() => {\n\t\t// only execute all the code below in client side\n\t\tif (typeof window !== 'undefined') {\n\t\t\t// Handler to call on window resize\n\t\t\tfunction handleResize() {\n\t\t\t\t// Set window width/height to state\n\t\t\t\tsetWindowSize({\n\t\t\t\t\twidth: window.innerWidth,\n\t\t\t\t\theight: window.innerHeight,\n\t\t\t\t});\n\t\t\t}\n\t\t\t// Add event listener\n\t\t\twindow.addEventListener(\"resize\", handleResize);\n\t\t\t// Call handler right away so state gets updated with initial window size\n\t\t\thandleResize();\n\t\t\t// Remove event listener on cleanup\n\t\t\treturn () => window.removeEventListener(\"resize\", handleResize);\n\t\t}\n\t}, []); // Empty array ensures that effect is only run on mount\n\treturn windowSize;\n}"]},"metadata":{},"sourceType":"module"}