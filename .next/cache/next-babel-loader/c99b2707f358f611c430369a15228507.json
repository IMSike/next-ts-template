{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/aurelien/repo/next-ts-template/components/logo.tsx\",\n    _this = this,\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState } from 'react';\n\nvar renderLogo = function renderLogo(props) {\n  _s();\n\n  var size = useWindowSize();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.containerBufferLogo,\n    children: /*#__PURE__*/_jsxDEV(\"img\", {\n      src: \"logo.png\",\n      alt: \"logo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 11\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(renderLogo, \"/dTDjnwlNGsRzu12Dr5t7HJe8sA=\", false, function () {\n  return [useWindowSize];\n});\n\nexport default renderLogo; // Hook\n\nfunction useWindowSize() {\n  _s2();\n\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  var _useState = useState({\n    width: undefined,\n    height: undefined\n  }),\n      windowSize = _useState[0],\n      setWindowSize = _useState[1];\n\n  useEffect(function () {\n    // only execute all the code below in client side\n    if (true) {\n      // Handler to call on window resize\n      var handleResize = function handleResize() {\n        // Set window width/height to state\n        setWindowSize({\n          width: window.innerWidth,\n          height: window.innerHeight\n        });\n      }; // Add event listener\n\n\n      window.addEventListener(\"resize\", handleResize); // Call handler right away so state gets updated with initial window size\n\n      handleResize(); // Remove event listener on cleanup\n\n      return function () {\n        return window.removeEventListener(\"resize\", handleResize);\n      };\n    }\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n}\n\n_s2(useWindowSize, \"J9BENybIGqNw0/U+xsdkGfZ/Kpg=\");","map":{"version":3,"sources":["/home/aurelien/repo/next-ts-template/components/logo.tsx"],"names":["React","useState","renderLogo","props","size","useWindowSize","styles","containerBufferLogo","width","undefined","height","windowSize","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAA2BC,QAA3B,QAA2C,OAA3C;;AAKA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD,EAAmB;AAAA;;AAClC,MAAMC,IAAI,GAAGC,aAAa,EAA1B;AAEH,sBACO;AAAK,IAAA,SAAS,EAAEC,MAAM,CAACC,mBAAvB;AAAA,2BACE;AAAK,MAAA,GAAG,EAAE,UAAV;AAAsB,MAAA,GAAG,EAAE;AAA3B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADP;AAKA,CARD;;GAAML,U;UACWG,a;;;AAQjB,eAAeH,UAAf,C,CAGA;;AACA,SAASG,aAAT,GAAyB;AAAA;;AACxB;AACA;AAFwB,kBAGYJ,QAAQ,CAAC;AAC5CO,IAAAA,KAAK,EAAEC,SADqC;AAE5CC,IAAAA,MAAM,EAAED;AAFoC,GAAD,CAHpB;AAAA,MAGjBE,UAHiB;AAAA,MAGLC,aAHK;;AAOxBC,EAAAA,SAAS,CAAC,YAAM;AACf;AACA,cAAmC;AAClC;AADkC,UAEzBC,YAFyB,GAElC,SAASA,YAAT,GAAwB;AACvB;AACAF,QAAAA,aAAa,CAAC;AACbJ,UAAAA,KAAK,EAAEO,MAAM,CAACC,UADD;AAEbN,UAAAA,MAAM,EAAEK,MAAM,CAACE;AAFF,SAAD,CAAb;AAIA,OARiC,EASlC;;;AACAF,MAAAA,MAAM,CAACG,gBAAP,CAAwB,QAAxB,EAAkCJ,YAAlC,EAVkC,CAWlC;;AACAA,MAAAA,YAAY,GAZsB,CAalC;;AACA,aAAO;AAAA,eAAMC,MAAM,CAACI,mBAAP,CAA2B,QAA3B,EAAqCL,YAArC,CAAN;AAAA,OAAP;AACA;AACD,GAlBQ,EAkBN,EAlBM,CAAT,CAPwB,CAyBhB;;AACR,SAAOH,UAAP;AACA;;IA3BQN,a","sourcesContent":["import React, { Component, useState } from 'react'\n\ninterface IProps {\n}\n\nconst renderLogo = (props: IProps) => {\n    const size = useWindowSize();\n\n\treturn (\n        <div className={styles.containerBufferLogo}>\n          <img src={\"logo.png\"} alt={\"logo\"}/>\n        </div>\n\t);\n}\nexport default renderLogo;\n\n\n// Hook\nfunction useWindowSize() {\n\t// Initialize state with undefined width/height so server and client renders match\n\t// Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n\tconst [windowSize, setWindowSize] = useState({\n\t\twidth: undefined,\n\t\theight: undefined,\n\t});\n\tuseEffect(() => {\n\t\t// only execute all the code below in client side\n\t\tif (typeof window !== 'undefined') {\n\t\t\t// Handler to call on window resize\n\t\t\tfunction handleResize() {\n\t\t\t\t// Set window width/height to state\n\t\t\t\tsetWindowSize({\n\t\t\t\t\twidth: window.innerWidth,\n\t\t\t\t\theight: window.innerHeight,\n\t\t\t\t});\n\t\t\t}\n\t\t\t// Add event listener\n\t\t\twindow.addEventListener(\"resize\", handleResize);\n\t\t\t// Call handler right away so state gets updated with initial window size\n\t\t\thandleResize();\n\t\t\t// Remove event listener on cleanup\n\t\t\treturn () => window.removeEventListener(\"resize\", handleResize);\n\t\t}\n\t}, []); // Empty array ensures that effect is only run on mount\n\treturn windowSize;\n}"]},"metadata":{},"sourceType":"module"}